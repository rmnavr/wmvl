
	(* TODO:
	   - instead of UpdDir button, pass fileName only, and construct fullPath everytime via NotebookDirection

	   INFO:
	   - for Initialization to work correctly, probably wait 2..3 sec before «Enable Dynamics»
	*)

(* Import funcs ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\ {{{1 *)

	(* <| "Out" -> {"IO", "erases all data from file"} |> *)
    wmvl`clearFileContent[fullFileName_String] := Export[fullFileName, ""];

	(* <| "Out" -> {"IO", "deleted cells from Notebook"} |> *)
    wmvl`deleteTaggedCells[] := Module[
		{}
	  , NotebookLocate[wmvl`$Tag] (* select prev imported cells *)
      ; NotebookDelete[SelectedNotebook[]] (* and delete them *)
    ];

	(* <| "Out" -> {"Integer", ""} |> *)
    wmvl`calcFontSize[nLines_Integer] := Module[
	   {nSmall, nBig, fontMin, fontMax, k, b}
	  , nSmall  = 10
      ; nBig    = 50
      ; fontMin = 2
      ; fontMax = 13
      ; k = -(fontMax - fontMin)/(nBig - nSmall)
      ; b = fontMax - k*nSmall
      ; If[nLines < nSmall, Return @ fontMax, Nothing]
      ; If[nLines > nBig  , Return @ fontMin, Nothing]
      ; Return @ Round @ (k*nLines + b)
    ];

	(* <| "Out" -> {"IO", "read file content, put it into new cell, execute"} |> *)
    wmvl`importFileToNewCellAndExecute[fullFileName_String] := Module[
        {importedText}
      , SelectionMove[InputNotebook[], After, Notebook] (* go to EOF *)
      ; NotebookWrite[
            EvaluationNotebook[]
          , Cell[
                importedText = Import[fullFileName, "text"]
                (*why not "nb" — it imports and launches, why not "string" — it makes extra «\n» symbols*)
              , "Input"
              , CellTags -> wmvl`$Tag
			]
          , All (*select all what was written*)
		]
      ; SetOptions[
            SelectedCells[][[1]]
          , FontSize -> wmvl`calcFontSize[StringCount[importedText, "\n"]]
          , LineSpacing -> {0.7, 0}
          , Background -> LightBlue
          , CellFrameColor -> Blue
          , CellDingbat ->
                Cell[
                    BoxData[StyleBox["⮸ ", FontColor -> GrayLevel[0.1]]]
                  , Background -> {}
                  , FontSize -> 15
                ]
        ]
      ; FrontEndTokenExecute[EvaluationNotebook[], "Style", "Input"]
      ; FrontEndTokenExecute[EvaluationNotebook[], "Evaluate"]
      ; FrontEndTokenExecute[EvaluationNotebook[], "ScrollLineUp"]   (* \ forced redraw *) 
      ; FrontEndTokenExecute[EvaluationNotebook[], "ScrollLineDown"] (* /				*)
    ];

(* ____________________________________________________________________________/ }}}1 *)
(* Status Cell ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\ {{{1 *)

	(* <| "Out" -> {"Cell", "docked"} |> *)
    wmvl`constructStatusCell[fullFileName_String] :=
        Cell[
            BoxData[ToBoxes[
				wmvl`constructStatusCellContent[fullFileName]
            ]]
          , "DockedCell"
          , CellFrame -> {{0, 0}, {2, 0}}
          , CellFrameMargins -> {{8, 8}, {4, 4}}
          , CellFrameColor -> Darker @ Gray
        ];

	(* <| "Out" -> {"DynamicModule", ""} |> *)
    wmvl`constructStatusCellContent[fullFileName_String] :=
        DynamicModule[
			{}
		  , Row[{
			    " "
			  , Style["WM-Vim-Link", Bold] //
				Framed[#, RoundingRadius -> 5, Background -> LightBlue, FrameMargins -> 2, ImageMargins -> 0]& //
				Tooltip[#, Row[{"Exchange File: ", Style[fullFileName, Bold]}]]&
			  , " | "
			  , wmvl`readerModule[fullFileName]
			  , " | "
			  ,	wmvl`constructDelAllCellsButton[], " "
			  , wmvl`constructPurgeButton[], " "
			  , wmvl`constructFEAbortButton[]
			  , " | "
			  , wmvl`constructUpdDirButton[]
			}]
		  , SaveDefinitions -> True
		  , Initialization :> {wmvl`clearFileContent[fullFileName]}
        ];

(* ■ Buttons ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\ {{{2 *)

	(* <| "Out" -> {"Button", ""} |> *)
	wmvl`constructFEAbortButton[] := Button["Abort Evaluation", FrontEndTokenExecute[EvaluationNotebook[], "EvaluatorAbort"], ImageMargins -> 0] ;

	(* <| "Out" -> {"Button", ""} |> *)
	wmvl`constructDelAllCellsButton[] := Button[
		"Delete all Cells"
	  , ( SelectionMove[EvaluationNotebook[], All, Notebook]
	    ; FrontEndTokenExecute[EvaluationNotebook[], "DeleteNext"]
		)
	  , ImageMargins -> 0
	  ] ;

	(* <| "Out" -> {"Button", ""} |> *)
	wmvl`constructPurgeButton[] := Button["Remove all from Global`", Remove["Global`*"] // Quiet, ImageMargins -> 0] ;

	(* <| "Out" -> {"Button", ""} |> *)
	wmvl`constructUpdDirButton[] := Button[
		"Upd Self Dir"
	  , wmvl`launchPlugin[NotebookDirectory[] <> "_WMVimLink_tmp.txt" ] 
	  , ImageMargins -> 0
	] ;

(* _______________________________________________________________________/ }}}2 *)
(* ■ Reader ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\ {{{2 *)

	(* <| "Out" -> {"Button", ""} |> *)
	wmvl`constructReadNowButton[fullFileName_String] :=
		Button[
			"Read now"
		   , ( wmvl`deleteTaggedCells[]
			 ; wmvl`importFileToNewCellAndExecute[fullFileName]
			 )
		   , ImageMargins -> 0, FrameMargins -> 0
		]

	(* <| "Out" -> {"Row", ""} |> *)
    wmvl`readerModule[fullFileName_String] := DynamicModule[
		{ dynLastChangedTime = FileDate[fullFileName]
		, dynActive = True
		}
	  , Row[{
			Checkbox[Dynamic[dynActive]], Toggler[Dynamic[dynActive], {True -> " AutoRead | ", False -> " AutoRead | "}]
		  , Dynamic[
				If[ dynActive
				  , Refresh[
						(* file read actions (at every UpdateInterval): *)
						If[ FileDate[fullFileName] > dynLastChangedTime
						  , { wmvl`deleteTaggedCells[]
							, wmvl`importFileToNewCellAndExecute[fullFileName]
							, dynLastChangedTime = FileDate[fullFileName]
							}
						  , Nothing
						]   
						(* visuals: *)
					  ; Row[{   
						  ,	"Last exchange file upd: "
						  , DateString[FileDate[fullFileName]]
						  , " "
						}]
					  , UpdateInterval -> 3
					]
				  , "---- -------- ---- ---: --- -- --- ---- --:--:--"
				]
			  , TrackedSymbols :> {dynActive}
			]
		  , " "
		  , wmvl`constructReadNowButton[fullFileName]
		}] //
		UnderBar
	]

(* _______________________________________________________________________/ }}}2 *)

(* ____________________________________________________________________________/ }}}1 *)
(* Launch ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\ {{{1 *)

	(* <| "Out" -> {"IO", ""} |> *)
    wmvl`launchPlugin[fullFileName_String (* echange file *)] := Module[
		{dockedCell}
	  , wmvl`clearFileContent[fullFileName]
	  ; dockedCell = wmvl`constructStatusCell[fullFileName]
      ; SetOptions[
            InputNotebook[]
          , DockedCells -> dockedCell
        ];
    ];

(* ____________________________________________________________________________/ }}}1 *)
(* Leftovers ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\ {{{1 *)

	wmvl`blinkerNOTUSEDCURRENTLY = 
		DynamicModule[
			{t, show, hide}
		  , show = Style["•", Green]
		  ; hide = Style[".", Gray]
		  ; Dynamic[
				Refresh[
					t = 0;
					Dynamic @
						If[ t == -1
						  , hide
						  , If[ t < 100
							  , (t++; show)
							  , (t = -1; hide)
							]
						]
				]
			  , UpdateInterval -> 3
			  , TrackedSymbols :> {}
			]
		] ;

(* ____________________________________________________________________________/ }}}1 *)

	wmvl`$Tag = "VimIO" ;
    wmvl`exchangeFile = NotebookDirectory[] <> "_WMVimLink_tmp.txt" ;
    wmvl`launchPlugin[wmvl`exchangeFile] ;

